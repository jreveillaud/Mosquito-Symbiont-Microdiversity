kable_paper("hover", full_width = F)
# replace metadata in the created phyloseq object
sample_data(ps) <- sample_data(new.metadata)
col <- brewer.pal(7, "Pastel2")
# reshape data for plot
test3 <- test %>% select(c(Sample, Species, Location, Organ, Read_depth, Read_erwinia)) %>% reshape2::melt(id.vars=c("Sample", "Species", "Location", "Organ"), vars=c("Read_depth", "Read_erwinia"))
count_whole <- test3[test3$Organ=="Whole",]
count_ovary <- test3[test3$Organ=="Ovary",]
make.italic <- function(x) as.expression(lapply(x, function(y) bquote(italic(.(y)))))
levels(count_whole$Species)= c("Aedes aegypti"=make.italic("Aedes aegypti"),
"Culex pipiens"=make.italic("Culex pipiens"),
"Culex quinquefasciatus"=make.italic("Culex quinquefasciatus"))
levels(count_ovary$Species)= c("Aedes aegypti"=make.italic("Aedes aegypti"),
"Culex pipiens"=make.italic("Culex pipiens"),
"Culex quinquefasciatus"=make.italic("Culex quinquefasciatus"))
levels(count_whole$Location) <- c("Bosc", "Camping~Europe", "Guadeloupe", "Lavar~(lab)", expression(paste(italic("Wolbachia"), "- (Slab TC)")))
levels(count_ovary$Location) <- c("Bosc", "Camping~Europe", "Guadeloupe", "Lavar~(lab)", expression(paste(italic("Wolbachia"), "- (Slab TC)")))
# plot
p_count1 <- ggplot(count_whole, aes(x = Sample, y = value, fill=variable))+
geom_bar(position = "dodge", stat = "identity")+
scale_fill_manual(values = col)+
theme_bw() +
theme(axis.text.x = element_text(angle = 90, size=12, hjust=1, vjust=0.5)) +
ggtitle("") +
guide_italics+
theme(legend.title = element_text(size = 20),
legend.position="bottom",
legend.text=element_text(size=14),
panel.spacing.y=unit(1, "lines"),
panel.spacing.x=unit(0.8, "lines"),
panel.spacing=unit(0,"lines"),
strip.background=element_rect(color="grey30", fill="grey90"),
strip.text.x = element_text(size = 16),
panel.border=element_rect(color="grey90"),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size=18)) +
facet_wrap(~Species+Location+Organ, scales = "free_x", ncol=3, labeller=label_parsed)+
labs(y="Sequence counts")+
ylim(0, 900000)+
geom_text(aes(label=value), position=position_dodge(width=1.1), width=0.25, size=4, hjust=-0.25, vjust=0.5, angle=90)+
guides(fill=guide_legend(title="Read"))
p_count2 <- ggplot(count_ovary, aes(x = Sample, y = value, fill=variable))+
geom_bar(position = "dodge", stat = "identity")+
scale_fill_manual(values = col)+
theme_bw() +
theme(axis.text.x = element_text(angle = 90, size=18, hjust=1, vjust=0.5)) +
ggtitle("") +
guide_italics+
theme(legend.title = element_text(size = 20),
legend.position="bottom",
legend.text=element_text(size=14),
panel.spacing.y=unit(1, "lines"),
panel.spacing.x=unit(0.8, "lines"),
panel.spacing=unit(0,"lines"),
strip.background=element_rect(color="grey30", fill="grey90"),
strip.text.x = element_text(size = 16),
panel.border=element_rect(color="grey90"),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size=18)) +
facet_wrap(~Species+Location+Organ, scales = "free_x", ncol=3, labeller=label_parsed)+
labs(y="Sequence counts")+
ylim(0, 900000)+
geom_text(aes(label=value), position=position_dodge(width=0.8), width=0.25, size=4, hjust=-0.25, vjust=0.5, angle=90)+
guides(fill=guide_legend(title="Read"))
# afficher plot
p_count1
p_count2
# panels
p_group <- plot_grid(p_count1+theme(legend.position="none"),
p_count2+theme(legend.position="none"),
nrow=2,
ncol=1)+
draw_plot_label(c("B1", "B2"), c(0, 0), c(1, 0.5), size = 20)
legend_plot <- get_legend(p_count1 + theme(legend.position="bottom"))
p_counts <- plot_grid(p_group, legend_plot, nrow=2, ncol=1, rel_heights = c(1, .1))
p_counts
guide_italics <- guides(fill = guide_legend(label.theme = element_text(size = 16, face = "italic", colour = "Black", angle = 0),
nrow=2, byrow=TRUE))
# select whole
ps.filter.whole <- subset_samples(ps, Organ=="Whole")
ps.filter.whole <- prune_taxa(taxa_sums(ps.filter.whole) >= 1, ps.filter.whole)
ps.filter.whole <- prune_samples(sample_sums(ps.filter.whole) >= 1, ps.filter.whole)
ps.filter.whole
# data pour plot
data_for_plot2 <- taxo_data_fast(ps.filter.whole, method = "abundance")
paste0("\n15 MOST ABUNDANT GENUS: \n") %>% cat()
paste0("\"", levels(data_for_plot2$Name), "\",\n") %>% cat()
new_names <- c("oligotype_AAGACTTA (40) | size:38025 / N0798 (40) | size:38213.",
"oligotype_TGAGTCGA (29) | size:7110 / N0311 (30) | size:8523.",
"oligotype_AAGACTTG (22) | size:4594 / N0802 (22) | size:4627.",
"Other.")
data_for_plot2$Name <- factor(data_for_plot2$Name, levels = new_names)
col_add <- brewer.pal(8, "Accent")
col <- c("oligotype_AAGACTTA (40) | size:38025 / N0798 (40) | size:38213."="#FFFFCF",
"oligotype_TGAGTCGA (29) | size:7110 / N0311 (30) | size:8523."="#FFE352",
"oligotype_AAGACTTG (22) | size:4594 / N0802 (22) | size:4627."="#F5F61B",
"Other."="#A0A0A0")
levels(data_for_plot2$Species)= c("Aedes aegypti"=make.italic("Aedes aegypti"),
"Culex pipiens"=make.italic("Culex pipiens"),
"Culex quinquefasciatus"=make.italic("Culex quinquefasciatus"))
levels(data_for_plot2$Location) <- c("Bosc", "Camping~Europe", "Guadeloupe", "Lavar~(lab)", expression(paste(italic("Wolbachia"), "- (Slab TC)")))
View(data_for_plot2)
ps.filter.ovary <- subset_samples(ps, Organ=="Ovary")
ps.filter.ovary <- prune_taxa(taxa_sums(ps.filter.ovary) >= 1, ps.filter.ovary)
ps.filter.ovary <- prune_samples(sample_sums(ps.filter.ovary) >= 1, ps.filter.ovary)
ps.filter.ovary
ps.filter.ovary@otu_table # only 1 oligotype
a <- data.frame(ps.filter.ovary@sam_data)
b <- data.frame(ps.filter.ovary@tax_table)
count_table <- data.frame(ps.filter.ovary@otu_table)
count_table %>%
kbl() %>%
kable_paper("hover", full_width = F)
a$Relative_Abundance <- 1.0000000000
a$Name <- paste0(b$ref,".")
levels(a$Species)= c("Aedes aegypti"=make.italic("Aedes aegypti"),
"Culex pipiens"=make.italic("Culex pipiens"),
"Culex quinquefasciatus"=make.italic("Culex quinquefasciatus"))
levels(a$Location) <- c("Bosc", "Camping~Europe", "Guadeloupe", "Lavar~(lab)", expression(paste(italic("Wolbachia"), "- (Slab TC)")))
View(a)
knitr::opts_chunk$set(echo = TRUE)
# Load main packages, paths and custom functions
source("../../../source/main_packages.R")
source("../../../source/paths.R")
source("../../../source/functions.R")
# Load supplementary packages
packages <- c("RColorBrewer", "ggpubr", "cowplot", "Biostrings", "openxlsx", "kableExtra")
invisible(lapply(packages, require, character.only = TRUE))
# move to oligotyping directory
setwd(paste0(path_oligo,"/wolbachia/oligotyping_Wolbachia_sequences-c2-s1-a0.0-A0-M10"))
# load the matrix count table
matrix_count <- read.table("MATRIX-COUNT.txt", header = TRUE) %>% t()
# arrange it
colnames(matrix_count) <- matrix_count[1,]
matrix_count <- matrix_count[-1,]
matrix_count <- matrix_count %>% as.data.frame()
# print it
matrix_count %>%
kbl() %>%
kable_paper("hover", full_width = F)
# move to oligotyping directory
setwd(paste0(path_oligo,"/wolbachia/oligotyping_Wolbachia_sequences-c2-s1-a0.0-A0-M10"))
# load the fasta table
fasta <- readDNAStringSet("OLIGO-REPRESENTATIVES.fasta")
# arrange it
fasta <- fasta %>% as.data.frame()
colnames(fasta) <- "seq"
fasta$oligotype <- rownames(fasta)
fasta <- fasta %>% dplyr::select(-c(seq))
# print it
fasta %>%
kbl() %>%
kable_paper("hover", full_width = F)
# Reference file
## move to tsv directory
setwd(path_tsv)
## load the reference table
ref_oligo_med2 <- read.table("2B_REF_info_wolbachia.tsv", sep="\t", header = TRUE)
## select only the 7 oligotypes of Wolbachia
ref_oligo_med2 <- ref_oligo_med2[!is.na(ref_oligo_med2$oligotype),]
## change order of columns
ref_oligo_med2 <- ref_oligo_med2 %>% select(c(seq, oligotype, MED_node_frequency_size, OLIGO_oligotype_frequency_size))
## create a column with reference name (will be used in plots)
ref_oligo_med2$ref <- paste0("oligotype_", ref_oligo_med2$OLIGO_oligotype_frequency_size, " / node_", ref_oligo_med2$MED_node_frequency_size)
## create a copy of fasta
fasta2 <- fasta
# Matrix count
## create an oligotype column in the matrix count
matrix_count$oligotype <- rownames(matrix_count)
## change order of columns
matrix_count <- matrix_count %>% dplyr::select(c(oligotype, everything()))
## merge the matrix count and the reference dataframe
matrix_count2 <- matrix_count %>% merge(ref_oligo_med2 %>% dplyr::select(-c(seq)), by="oligotype")
## change order of columns
matrix_count2 <- matrix_count2 %>% dplyr::select(c(oligotype, MED_node_frequency_size, OLIGO_oligotype_frequency_size, ref, everything()))
## change rownames
rownames(matrix_count2) <- matrix_count2$ref
## change order of columns
matrix_count2 <- matrix_count2 %>% dplyr::select(-c(oligotype, ref, MED_node_frequency_size, OLIGO_oligotype_frequency_size))
## print it
matrix_count2 %>%
kbl() %>%
kable_paper("hover", full_width = F)
## edit the fasta dataframe
fasta2 <- fasta2 %>% merge(ref_oligo_med2 %>% dplyr::select(-c(seq)), by="oligotype")
rownames(fasta2) <- fasta2$ref
fasta2 <- fasta2 %>% dplyr::select(-c(MED_node_frequency_size, OLIGO_oligotype_frequency_size, oligotype))
## print it
fasta2 %>%
kbl() %>%
kable_paper("hover", full_width = F)
metadata <- read.csv(paste0(path_metadata,"/metadata_08_02_2021.csv"), sep=";")
rownames(metadata) <- metadata$Sample
# convert matrix_count into matrix and numeric
matrix_count <- matrix_count2 %>% as.matrix()
class(matrix_count) <- "numeric"
# phyloseq elements
OTU = otu_table(as.matrix(matrix_count), taxa_are_rows =TRUE)
TAX = tax_table(as.matrix(fasta2))
SAM = sample_data(metadata)
# phyloseq object
ps <- phyloseq(OTU, TAX, SAM)
ps
compute_read_counts(ps)
# remove blanks
ps <- subset_samples(ps, Location!="Blank")
ps <- check_ps(ps)
ps
setwd(path_rdata)
ps.filter <- readRDS("1D_MED_phyloseq_decontam.rds")
ps.filter <- check_ps(ps.filter)
guide_italics <- guides(fill = guide_legend(label.theme = element_text(size = 16, face = "italic", colour = "Black", angle = 0)))
# add read depth in sample table of phyloseq object
sample_data(ps.filter)$Read_depth <- sample_sums(ps.filter)
# select Wolbachia
ps.wolbachia <- ps.filter %>% subset_taxa(Genus=="Wolbachia")
# add read depth of Wolbachia
sample_data(ps.filter)$Read_wolbachia <- sample_sums(ps.wolbachia)
sample_data(ps.filter) %>% colnames()
sample_data(ps.wolbachia) %>% colnames()
# add percent of Wolbachia
sample_data(ps.filter)$Percent_wolbachia <- sample_data(ps.filter)$Read_wolbachia / sample_data(ps.filter)$Read_depth
# round the percent of Wolbachia at 2 decimals
sample_data(ps.filter)$Percent_wolbachia <- sample_data(ps.filter)$Percent_wolbachia %>% round(2)
# extract metadata table
test <- data.frame(sample_data(ps.filter))
# merge this metadata table with the other
new.metadata <- data.frame(sample_data(ps)) %>% merge(test %>% dplyr::select(c(Sample, Read_depth, Read_wolbachia, Percent_wolbachia)), by="Sample")
new.metadata <- test[new.metadata$Sample %in% sample_names(ps),]
rownames(new.metadata) <- new.metadata$Sample
# print it
new.metadata %>%
kbl() %>%
kable_paper("hover", full_width = F)
# replace metadata in the created phyloseq object
sample_data(ps) <- sample_data(new.metadata)
col <- brewer.pal(7, "Pastel2")
# reshape data for plot
test3 <- test %>% select(c(Sample, Species, Location, Organ, Read_depth, Read_wolbachia)) %>% reshape2::melt(id.vars=c("Sample", "Species", "Location", "Organ"), vars=c("Read_depth", "Read_wolbachia"))
count_whole <- test3[test3$Organ=="Whole",]
count_ovary <- test3[test3$Organ=="Ovary",]
make.italic <- function(x) as.expression(lapply(x, function(y) bquote(italic(.(y)))))
levels(count_whole$Species)= c("Aedes aegypti"=make.italic("Aedes aegypti"),
"Culex pipiens"=make.italic("Culex pipiens"),
"Culex quinquefasciatus"=make.italic("Culex quinquefasciatus"))
levels(count_ovary$Species)= c("Aedes aegypti"=make.italic("Aedes aegypti"),
"Culex pipiens"=make.italic("Culex pipiens"),
"Culex quinquefasciatus"=make.italic("Culex quinquefasciatus"))
levels(count_whole$Location) <- c("Bosc", "Camping~Europe", "Guadeloupe", "Lavar~(lab)", expression(paste(italic("Wolbachia"), "- (Slab TC)")))
levels(count_ovary$Location) <- c("Bosc", "Camping~Europe", "Guadeloupe", "Lavar~(lab)", expression(paste(italic("Wolbachia"), "- (Slab TC)")))
# plot
p_count1 <- ggplot(count_whole, aes(x = Sample, y = value, fill=variable))+
geom_bar(position = "dodge", stat = "identity")+
scale_fill_manual(values = col)+
theme_bw() +
theme(axis.text.x = element_text(angle = 90, size=12, hjust=1, vjust=0.5)) +
ggtitle("") +
guide_italics+
theme(legend.title = element_text(size = 20),
legend.position="bottom",
legend.text=element_text(size=14),
panel.spacing.y=unit(1, "lines"),
panel.spacing.x=unit(0.8, "lines"),
panel.spacing=unit(0,"lines"),
strip.background=element_rect(color="grey30", fill="grey90"),
strip.text.x = element_text(size = 16),
panel.border=element_rect(color="grey90"),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size=18)) +
facet_wrap(~Species+Location+Organ, scales = "free_x", ncol=3, labeller=label_parsed)+
labs(y="Sequence counts")+
ylim(0, 900000)+
geom_text(aes(label=value), position=position_dodge(width=1.1), width=0.25, size=4, hjust=-0.25, vjust=0.5, angle=90)+
guides(fill=guide_legend(title="Read"))
p_count2 <- ggplot(count_ovary, aes(x = Sample, y = value, fill=variable))+
geom_bar(position = "dodge", stat = "identity")+
scale_fill_manual(values = col)+
theme_bw() +
theme(axis.text.x = element_text(angle = 90, size=18, hjust=1, vjust=0.5)) +
ggtitle("") +
guide_italics+
theme(legend.title = element_text(size = 20),
legend.position="bottom",
legend.text=element_text(size=14),
panel.spacing.y=unit(1, "lines"),
panel.spacing.x=unit(0.8, "lines"),
panel.spacing=unit(0,"lines"),
strip.background=element_rect(color="grey30", fill="grey90"),
strip.text.x = element_text(size = 16),
panel.border=element_rect(color="grey90"),
axis.ticks.x=element_blank(),
axis.text.y = element_text(size=18)) +
facet_wrap(~Species+Location+Organ, scales = "free_x", ncol=3, labeller=label_parsed)+
labs(y="Sequence counts")+
ylim(0, 900000)+
geom_text(aes(label=value), position=position_dodge(width=0.8), width=0.25, size=4, hjust=-0.25, vjust=0.5, angle=90)+
guides(fill=guide_legend(title="Read"))
# afficher plot
p_count1
p_count2
# panels
p_group <- plot_grid(p_count1+theme(legend.position="none"),
p_count2+theme(legend.position="none"),
nrow=2,
ncol=1)+
draw_plot_label(c("B1", "B2"), c(0, 0), c(1, 0.5), size = 20)
legend_plot <- get_legend(p_count1 + theme(legend.position="bottom"))
p_counts <- plot_grid(p_group, legend_plot, nrow=2, ncol=1, rel_heights = c(1, .1))
p_counts
guide_italics <- guides(fill = guide_legend(label.theme = element_text(size = 16, face = "italic", colour = "Black", angle = 0),
nrow=4, byrow=TRUE))
# select whole
ps.filter.whole <- subset_samples(ps, Organ=="Whole")
ps.filter.whole <- prune_taxa(taxa_sums(ps.filter.whole) >= 1, ps.filter.whole)
ps.filter.whole <- prune_samples(sample_sums(ps.filter.whole) >= 1, ps.filter.whole)
ps.filter.whole
# data pour plot
data_for_plot2 <- taxo_data_fast(ps.filter.whole, method = "abundance")
paste0("\n15 MOST ABUNDANT GENUS: \n") %>% cat()
paste0("\"", levels(data_for_plot2$Name), "\",\n") %>% cat()
new_names <- c( "oligotype_AT (120) | size:3890567 / N0711 (120) | size:3744518.",
"oligotype_GT (111) | size:119651 / N0241 (111) | size:114576.",
"oligotype_AG (109) | size:42030 / N0245 (109) | size:41133.",
"oligotype_TT (89) | size:15422 / N0244 (89) | size:15236.",
"oligotype_CC (92) | size:7065 / N0026 (92) | size:7069.",
"oligotype_GG (44) | size:4080 / N0250 (44) | size:4011.",
"oligotype_AC (80) | size:2504 / N0253 (80) | size:2481."
)
data_for_plot2$Name <- factor(data_for_plot2$Name, levels = new_names)
col <- c("oligotype_AT (120) | size:3890567 / N0711 (120) | size:3744518."="#FEB24C",
"oligotype_GT (111) | size:119651 / N0241 (111) | size:114576."="#FAD769",
"oligotype_AG (109) | size:42030 / N0245 (109) | size:41133."="#666666",
"oligotype_CC (92) | size:7065 / N0026 (92) | size:7069."="#BEAED4",
"oligotype_TT (89) | size:15422 / N0244 (89) | size:15236."="#BF5B17",
"oligotype_AC (80) | size:2504 / N0253 (80) | size:2481."="#F4CAE4",
"oligotype_GG (44) | size:4080 / N0250 (44) | size:4011."="#FDCDAC")
levels(data_for_plot2$Species)= c("Aedes aegypti"=make.italic("Aedes aegypti"),
"Culex pipiens"=make.italic("Culex pipiens"),
"Culex quinquefasciatus"=make.italic("Culex quinquefasciatus"))
levels(data_for_plot2$Location) <- c("Bosc", "Camping~Europe", "Guadeloupe", "Lavar~(lab)", expression(paste(italic("Wolbachia"), "- (Slab TC)")))
View(data_for_plot2)
knitr::opts_chunk$set(echo = TRUE)
physeq <- ps.filter
colnames(tax_table(physeq))[7] <- "Strain"
levels(physeq@sam_data$Species) <- c("AA", "CP", "CQ")
# levels(physeq@sam_data$Species)
levels(physeq@sam_data$Location) <- c("B", "CE", "G", "L", "W-")
# levels(physeq@sam_data$Location)
physeq %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
phyloseq_ampvis_heatmap(transform = FALSE,
group_by = "SampleID",
facet_by = c("Location", "Organ", "Field", "Species" ),
tax_aggregate = "Genus",
tax_add = NULL,
ntax  = 100) -> p
knitr::opts_chunk$set(echo = TRUE)
# Load main packages, paths and custom functions
source("../../../source/main_packages.R")
source("../../../source/paths.R")
source("../../../source/functions.R")
# Florentin CONSTANCIAS's script
source("https://raw.githubusercontent.com/fconstancias/DivComAnalyses/master/R/phyloseq_heatmap.R")
setwd(path_rdata)
ps <- readRDS("MED_phyloseq.rds")
ps.filter <- readRDS("1D_MED_phyloseq_decontam.rds")
change_organ(ps.filter)
change_species(ps.filter)
physeq <- ps.filter
colnames(tax_table(physeq))[7] <- "Strain"
levels(physeq@sam_data$Species) <- c("AA", "CP", "CQ")
# levels(physeq@sam_data$Species)
levels(physeq@sam_data$Location) <- c("B", "CE", "G", "L", "W-")
# levels(physeq@sam_data$Location)
physeq %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
phyloseq_ampvis_heatmap(transform = FALSE,
group_by = "SampleID",
facet_by = c("Location", "Organ", "Field", "Species" ),
tax_aggregate = "Genus",
tax_add = NULL,
ntax  = 100) -> p
p + facet_grid( ~ Species + Location + Organ + Field , scales = "free", space = "free") +
theme(axis.text.y = element_text(face="italic", angle = 0,  size = 12))+
scale_fill_viridis_c(trans=log,
#trans = scales::pseudo_log_trans(sigma = 0.001),
na.value = 'transparent') -> p1
physeq <- ps.filter
colnames(tax_table(physeq))[7] <- "Strain"
levels(physeq@sam_data$Species) <- c("AA", "CP", "CQ")
# levels(physeq@sam_data$Species)
levels(physeq@sam_data$Location) <- c("B", "CE", "G", "L", "W-")
# levels(physeq@sam_data$Location)
physeq %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
phyloseq_ampvis_heatmap(transform = FALSE,
group_by = "SampleID",
facet_by = c("Location", "Organ", "Field", "Species" ),
tax_aggregate = "Genus",
tax_add = NULL,
ntax  = 100) -> p
p + facet_grid( ~ Species + Location + Organ + Field , scales = "free", space = "free") +
theme(axis.text.y = element_text(face="italic", angle = 0,  size = 12))+
scale_fill_viridis_c(trans="log",
#trans = scales::pseudo_log_trans(sigma = 0.001),
na.value = 'transparent') -> p1
p1
physeq <- ps.filter
colnames(tax_table(physeq))[7] <- "Strain"
levels(physeq@sam_data$Species) <- c("AA", "CP", "CQ")
# levels(physeq@sam_data$Species)
levels(physeq@sam_data$Location) <- c("B", "CE", "G", "L", "W-")
# levels(physeq@sam_data$Location)
physeq %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
phyloseq_ampvis_heatmap(transform = FALSE,
group_by = "SampleID",
facet_by = c("Location", "Organ", "Field", "Species" ),
tax_aggregate = "Genus",
tax_add = NULL,
ntax  = 100) -> p
p + facet_grid( ~ Species + Location + Organ + Field , scales = "free", space = "free") +
theme(axis.text.y = element_text(face="italic", angle = 0,  size = 12))+
scale_fill_viridis_c(
trans = scales::pseudo_log_trans(sigma = 0.001),
na.value = 'transparent') -> p1
p1
physeq <- ps.filter
colnames(tax_table(physeq))[7] <- "Strain"
levels(physeq@sam_data$Species) <- c("AA", "CP", "CQ")
# levels(physeq@sam_data$Species)
levels(physeq@sam_data$Location) <- c("B", "CE", "G", "L", "W-")
# levels(physeq@sam_data$Location)
physeq %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
phyloseq_ampvis_heatmap(transform = FALSE,
group_by = "SampleID",
facet_by = c("Location", "Organ", "Field", "Species" ),
tax_aggregate = "Genus",
tax_add = NULL,
ntax  = 100) -> p
p + facet_grid( ~ Species + Location + Organ + Field , scales = "free", space = "free") +
theme(axis.text.y = element_text(face="italic", angle = 0,  size = 12))+
scale_fill_viridis_c(breaks = c(0, 25, 50, 75, 100),
labels = c(0, 25, 50, 75, 100),
trans = scales::pseudo_log_trans(sigma = 0.001),
na.value = 'transparent') -> p1
p1
physeq <- ps.filter
colnames(tax_table(physeq))[7] <- "Strain"
levels(physeq@sam_data$Species) <- c("AA", "CP", "CQ")
# levels(physeq@sam_data$Species)
levels(physeq@sam_data$Location) <- c("B", "CE", "G", "L", "W-")
# levels(physeq@sam_data$Location)
physeq %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
phyloseq_ampvis_heatmap(transform = FALSE,
group_by = "SampleID",
facet_by = c("Location", "Organ", "Field", "Species" ),
tax_aggregate = "Genus",
tax_add = NULL,
ntax  = 100) -> p
p + facet_grid( ~ Species + Location + Organ + Field , scales = "free", space = "free") +
theme(axis.text.y = element_text(face="italic", angle = 0,  size = 12))+
scale_fill_viridis_c(breaks = c(0, 100),
labels = c(0, 100),
trans = scales::pseudo_log_trans(sigma = 0.001),
na.value = 'transparent') -> p1
p1
physeq <- ps.filter
colnames(tax_table(physeq))[7] <- "Strain"
levels(physeq@sam_data$Species) <- c("AA", "CP", "CQ")
# levels(physeq@sam_data$Species)
levels(physeq@sam_data$Location) <- c("B", "CE", "G", "L", "W-")
# levels(physeq@sam_data$Location)
physeq %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
phyloseq_ampvis_heatmap(transform = FALSE,
group_by = "SampleID",
facet_by = c("Location", "Organ", "Field", "Species" ),
tax_aggregate = "Genus",
tax_add = NULL,
ntax  = 100) -> p
p + facet_grid( ~ Species + Location + Organ + Field , scales = "free", space = "free") +
theme(axis.text.y = element_text(face="italic", angle = 0,  size = 12),
legend.title = "pseudo log transformation")+
scale_fill_viridis_c(breaks = c(0, 100),
labels = c(0, 100),
trans = scales::pseudo_log_trans(sigma = 0.001),
na.value = 'transparent') -> p1
p1
physeq <- ps.filter
colnames(tax_table(physeq))[7] <- "Strain"
levels(physeq@sam_data$Species) <- c("AA", "CP", "CQ")
# levels(physeq@sam_data$Species)
levels(physeq@sam_data$Location) <- c("B", "CE", "G", "L", "W-")
# levels(physeq@sam_data$Location)
physeq %>%
transform_sample_counts(function(x) x/sum(x) *100) %>%
phyloseq_ampvis_heatmap(transform = FALSE,
group_by = "SampleID",
facet_by = c("Location", "Organ", "Field", "Species" ),
tax_aggregate = "Genus",
tax_add = NULL,
ntax  = 100) -> p
p + facet_grid( ~ Species + Location + Organ + Field , scales = "free", space = "free") +
theme(axis.text.y = element_text(face="italic", angle = 0,  size = 12, legend.title = "pseudo log transformation"),
)+
scale_fill_viridis_c(breaks = c(0, 100),
labels = c(0, 100),
trans = scales::pseudo_log_trans(sigma = 0.001),
na.value = 'transparent') -> p1
